..  Copyright (C)  Dave Parillo.  Permission is granted to copy, distribute
    and/or modify this document under the terms of the GNU Free Documentation
    License, Version 1.3 or any later version published by the Free Software
    Foundation; with Invariant Sections being Forward, and Preface,
    no Front-Cover Texts, and no Back-Cover Texts.  A copy of
    the license is included in the section entitled "GNU Free Documentation
    License".

.. index:: 
   pair: copy; constructor

Copying objects
===============
C++ is one of the few languages that provides precise control
over how memory is managed.
Programmers have choices on how (or if) objects are copied and moved.
Whenever an object is passed by value to a function,
or returned by value from a function, a copy is implicitly performed:

.. code-block:: cpp

   std::vector<int> scores;
   auto avg = average (scores);  // a copy of scores is passed to average

Copy operations also occur in range-for loops:

.. code-block:: cpp

   for (const int value: scores)

Each member of ``scores`` is copied into ``value`` on each iteration.

Explicit copying can also be performed.
Whenever you have an existing object and use it to initialize
a new or existing object, the copy constructor is called:

.. code-block:: cpp

   std::vector<std::string> words;
   std::vector<std::string> w2 = words; // copy words into w2

Both explicit and implicit copies are controlled by 
a special constructor called the *copy constructor*.
Like other constructors,
the copy constructor is a member function with the same name as the class name.
The signature **must** be able to evaluate to this:

.. code-block:: cpp

   class_name ( const class_name & );

A copy constructor *may* take other parameters, but it is uncommon.
If there are other parameters, they must all have defaults values defined.
In general,
the default copy constructor generated by the compiler will suffice.
If the default creation is inhibited for any reason,
it is acceptable to explicitly declare the default constructor:

.. code-block:: cpp

   class_name ( const class_name & ) = default;

However the default copy constructor is created,
the behavior is the same: each class member is copied, in initialization order.

.. code-block:: cpp

   struct A
   {
     int n;
     double d;

     // user defined default constructor
     A(int n = 0, double d = 1) 
       : n(n), d(d)
     { }

     // user defined copy constructor
     A(const A& other) 
       : n(other.n), d(other.d) 
     { }
   };

In this case, the user defined copy constructor
does what the default constructors would do.
When that is the case, it's best not to redo the work of the compiler.

When objects manage their own resources,
simple member-wise assignment cannot be used.
Consider the following:

.. code-block:: cpp

   #include <cctype>
   #include <cstddef>
   #include <cstring>
   #include <iostream>

   using std::size_t;

   namespace mesa {
     class string {
       private:
         char* data;
         size_t sz;

       public:
         explicit string(const char* value = "") {
           sz = std::strlen(value) + 1;
           data = new char[sz];
           for (size_t i=0; i < sz; ++i) {
            data[i] = value[i];
           }
           data[sz-1] = '\0';
         }
         void upper() {
           for (size_t i=0; i < sz; ++i)
            data[i] = std::toupper(data[i]);
         }

         ~string() {
           delete[] data;
         }

         char* c_str() { return data; }
     };

   } // namespace mesa


This class encapsulates an array of characters, providing 4 functions:

- A one arg constructor that also serves as the default constructor
  The constructor allocates memory for the ``char`` array and copies
  the provided string
- A destructor to clean up memory allocated by the constructor
- A function ``upper`` to transform the entire array to upper case.

What happens when we use this class?

.. code-block:: cpp

   int main() {
     mesa::string hello("Hello, world!");
     mesa::string copy = hello;
     copy.upper();
     std::cout << hello.c_str() << '\n';

     return 0;
   }

This program prints::

   HELLO, WORLD!

Even though we copied ``hello``,
changing the case of copy also resulted in changes to the original.
When we copy a value, we expect a *cloned object*.
A object that in all respects has the same attributes,
but that is separate and distinct.
We **don't** want changes in one to affect the other.

The default copy behavior is a *shallow copy*: a literal copying of the bytes
of each member variable.
In the case of our string class, the ``char*`` is faithfully copied.
When the copy is made, both variables point to the same memory.
To see this copy in action, view it
`here <http://pythontutor.com/cpp.html#code=%23include%20%3Ccctype%3E%0A%23include%20%3Ccstddef%3E%0A%23include%20%3Ccstring%3E%0A%23include%20%3Ciostream%3E%0A%0Ausing%20std%3A%3Asize_t%3B%0A%0Anamespace%20mesa%20%7B%0A%20%20class%20string%20%7B%0A%20%20%20%20private%3A%0A%20%20%20%20%20%20char*%20data%3B%0A%20%20%20%20%20%20size_t%20sz%3B%0A%0A%20%20%20%20public%3A%0A%20%20%20%20%20%20explicit%20string%28const%20char*%20value%20%3D%20%22%22%29%20%7B%0A%20%20%20%20%20%20%20%20sz%20%3D%20std%3A%3Astrlen%28value%29%20%2B%201%3B%0A%20%20%20%20%20%20%20%20data%20%3D%20new%20char%5Bsz%5D%3B%0A%20%20%20%20%20%20%20%20for%20%28size_t%20i%3D0%3B%20i%20%3C%20sz%3B%20%2B%2Bi%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20data%5Bi%5D%20%3D%20value%5Bi%5D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20data%5Bsz-1%5D%20%3D%20'%5C0'%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20void%20upper%28%29%20%7B%0A%20%20%20%20%20%20%20%20for%20%28size_t%20i%3D0%3B%20i%20%3C%20sz%3B%20%2B%2Bi%29%0A%20%20%20%20%20%20%20%20%20%20data%5Bi%5D%20%3D%20std%3A%3Atoupper%28data%5Bi%5D%29%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20~string%28%29%20%7B%0A%20%20%20%20%20%20%20%20delete%5B%5D%20data%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20char*%20c_str%28%29%20%7B%20return%20data%3B%20%7D%0A%20%20%7D%3B%0A%0A%7D%20//%20namespace%20mesa%0Aint%20main%28%29%0A%7B%0A%20%20mesa%3A%3Astring%20hello%28%22Hello,%20world!%22%29%3B%0A%20%20std%3A%3Acout%20%3C%3C%20hello.c_str%28%29%20%3C%3C%20'%5Cn'%3B%0A%20%20mesa%3A%3Astring%20copy%20%3D%20hello%3B%0A%20%20copy.upper%28%29%3B%0A%20%20std%3A%3Acout%20%3C%3C%20hello.c_str%28%29%20%3C%3C%20'%5Cn'%3B%0A%0A%20%20return%200%3B%0A%0A%7D&curInstr=39&mode=display&origin=opt-frontend.js&py=cpp&rawInputLstJSON=%5B%5D>`__.

Because there are two pointers to the same data on the free store,
when either is deleted, the free-store memory is recovered.
Consider this:

.. code-block:: cpp

   mesa::string hello("Hello, world!");

   // create a new scope
   {
     mesa::string copy = hello;
   } // local variable copy destroyed

   std::cout << hello.c_str() << '\n';

What does the last line print?

.. reveal:: reveal_str_copy_ube

   There is no way to know for sure.

   When ``copy`` goes out of scope and its destructor is called,
   it deletes the memory ``copy::data`` points to,
   but this is the same array ``hello`` is using.
   When ``hello.c_str()`` is called, undefined behavior is the result.

To see this copy in action, view it
`here <http://pythontutor.com/cpp.html#code=%23include%20%3Ccctype%3E%0A%23include%20%3Ccstddef%3E%0A%23include%20%3Ccstring%3E%0A%23include%20%3Ciostream%3E%0A%0Ausing%20std%3A%3Asize_t%3B%0A%0Anamespace%20mesa%20%7B%0A%20%20class%20string%20%7B%0A%20%20%20%20private%3A%0A%20%20%20%20%20%20char*%20data%3B%0A%20%20%20%20%20%20size_t%20sz%3B%0A%0A%20%20%20%20public%3A%0A%20%20%20%20%20%20explicit%20string%28const%20char*%20value%20%3D%20%22%22%29%20%7B%0A%20%20%20%20%20%20%20%20sz%20%3D%20std%3A%3Astrlen%28value%29%20%2B%201%3B%0A%20%20%20%20%20%20%20%20data%20%3D%20new%20char%5Bsz%5D%3B%0A%20%20%20%20%20%20%20%20for%20%28size_t%20i%3D0%3B%20i%20%3C%20sz%3B%20%2B%2Bi%29%20%7B%0A%20%20%20%20%20%20%20%20%20%20data%5Bi%5D%20%3D%20value%5Bi%5D%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20data%5Bsz-1%5D%20%3D%20'%5C0'%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20void%20upper%28%29%20%7B%0A%20%20%20%20%20%20%20%20for%20%28size_t%20i%3D0%3B%20i%20%3C%20sz%3B%20%2B%2Bi%29%0A%20%20%20%20%20%20%20%20%20%20data%5Bi%5D%20%3D%20std%3A%3Atoupper%28data%5Bi%5D%29%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20~string%28%29%20%7B%0A%20%20%20%20%20%20%20%20delete%5B%5D%20data%3B%0A%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20char*%20c_str%28%29%20%7B%20return%20data%3B%20%7D%0A%20%20%7D%3B%0A%0A%7D%20//%20namespace%20mesa%0Aint%20main%28%29%0A%7B%0A%20%20mesa%3A%3Astring%20hello%28%22Hello,%20world!%22%29%3B%0A%20%20//%20create%20a%20new%20scope%0A%20%20%7B%0A%20%20%20%20mesa%3A%3Astring%20copy%20%3D%20hello%3B%0A%20%20%7D%20//%20local%20variable%20copy%20destroyed%0A%0A%20%20std%3A%3Acout%20%3C%3C%20hello.c_str%28%29%20%3C%3C%20'%5Cn'%3B%0A%20%20return%200%3B%0A%7D&codeDivHeight=400&codeDivWidth=350&curInstr=36&origin=opt-frontend.js&py=cpp&rawInputLstJSON=%5B%5D">`__.

Fixing these problems requires writing a custom copy constructor.

.. code-block:: cpp

   string (const string& other) {
     sz = other.sz;
     data = new char[sz];
     std::strcpy(data, other.data);
   }

Each class member needs to be copied.
The member ``sz`` can simply be default copied.
It's the pointer member that needs special treatment:

- Initialize a new memory block large enough to hold the copy
- Copy each element of the source array into the destination.
  This is what :cref:`std::strcpy` does.

In contrast to a *shallow* copy,
this copy is a **deep copy**.
It doesn't copy the pointer at all.
It makes an entirely new pointer and (deeply)
copies all of the data pointed to by the source pointer to the destination.

.. admonition:: Try This!

   Take the copy constructor provided and rerun the previous 
   ``mesa::string`` examples in this section.


-----

.. admonition:: More to Explore

   - From cppreference.com:

     - `Copy constructors <https://en.cppreference.com/w/cpp/language/copy_constructor>`__

