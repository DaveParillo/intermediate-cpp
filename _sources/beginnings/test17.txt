.. activecode:: ac_begin_compiler_test_1z
   :language: cpp
   :compileargs: ['-Wall', '-Wextra', '-pedantic', '-std=c++1z']

   // A simple test for C++17 support
   // compiled with: -Wall -Wextra -pedantic -std=c++1z

   #include <any>
   #include <iostream>
   #include <type_traits>

   template <typename T> 
   // auto return type deduction: C++14
   auto get_value(T value) { 
      // constexpr-if: C++17
      // is_pointer type trait: C++11
      if constexpr (std::is_pointer<T>::value) {
          return *value;
      } else {
          return value;
      }
   }

   int main() {
     // container for any type:   C++17
     auto a = std::make_any<int>(3);
     std::cout << std::any_cast<int>(a) << '\n';
     a = 3.14159;
     std::cout << std::any_cast<double>(a) << '\n';
     int i = 9;
     int* p = &i;
                 
     std::cout << get_value(*p) << '\n';
     std::cout << get_value(i) << '\n';
     return i;
   }

