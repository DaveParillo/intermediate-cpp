.. activecode:: ac-class-enum-cards-ex1
   :language: cpp
   :compileargs: ['-Wall', '-Wextra', '-pedantic', '-std=c++11']

   #include <array>
   #include <iostream>
   #include <vector>

   enum class Rank {
     Ace = 1, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King
   };

   // Define an array of Rank to allow range-for looping
   const std::array<Rank,13> ranks = 
   {
     {
       Rank::Ace, Rank::Two, Rank::Three, Rank::Four, Rank::Five,    
       Rank::Six, Rank::Seven, Rank::Eight, Rank::Nine, Rank::Ten,    
       Rank::Jack, Rank::Queen, Rank::King     
     }
   };

   enum class Suit {
     Clubs, Diamonds, Hearts, Spades
   };

   // Define an array of Suit to allow range-for looping
   const std::array<Suit,4> suits = 
   {
     {
       Suit::Clubs, Suit::Diamonds, Suit::Hearts, Suit::Spades     
     }
   };

   struct Card {
     Rank rank;
     Suit suit;
   };

   std::ostream& operator<<(std::ostream& os, const Rank& rhs );
   std::ostream& operator<<(std::ostream& os, const Suit& rhs );
   std::ostream& operator<<(std::ostream& os, const Card& rhs );


   // short, but take care . . . 
   // a change in the order of the enum could break this,
   // Assumes order: A,2,3,4,5,6,7,8,9,10,J,Q,K
   // A more verbose switch would be better
   std::ostream& operator<<(std::ostream& os, const Rank& rhs ) {
     if (rhs > Rank::Ace && rhs < Rank::Jack) {
       os << static_cast<int>(rhs);
     } else if (rhs == Rank::Ace) {
       os << "Ace";
     } else if (rhs == Rank::Jack) {
       os << "Jack";
     } else if (rhs == Rank::Queen) {
       os << "Queen";
     } else {
       os << "King";
     }

     return os;
   }

   std::ostream& operator<<(std::ostream& os, const Suit& rhs ) {
     switch(rhs) {
       case Suit::Clubs:    os << "Clubs"; break;
       case Suit::Diamonds: os << "Diamonds"; break;
       case Suit::Hearts:   os << "Hearts"; break;
       case Suit::Spades:   os << "Spades"; break;
     }
     return os;
   }

   std::ostream& operator<<(std::ostream& os, const Card& rhs ) {
     return os << rhs.rank << " of " << rhs.suit;
   }

   int main() {
     std::vector<Card> deck;
     for (const auto& s: suits) {
       for (const auto& r: ranks) {
         deck.push_back(Card{r,s});
       }
     }
     for(const auto& c : deck ) {
       std::cout << c << '\n';
     }
     return 0;
   }

